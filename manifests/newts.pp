# Where to checkout to the Git repo.
$newts_local_repo = '/home/vagrant/newts'

# Version of then target jars generated by `mvn compile`
$newts_version = '1.0.0'

# Where the newts binaries and config files will live
$newts_home = '/opt/newts'
$newts_jar = "${newts_home}/newts-rest.jar"
$newts_config = "${newts_home}/config.yaml"

# The compiled JAR we will use
$newts_target_jar = "${newts_local_repo}/rest/target/newts-rest-${newts_version}-SNAPSHOT.jar"

# apt-get install maven git
package {
  'maven':
    ensure  => latest,
    require => Class['java'];
  'git':
    ensure => latest;
  'curl':
    ensure => latest;
}

# git clone https://github.com/OpenNMS/newts.git
vcsrepo { $newts_local_repo:
  ensure   => latest,
  user     => vagrant,
  provider => git,
  source   => 'https://github.com/OpenNMS/newts.git',
  revision => 'master',
  require  => [
    Package['git']
  ]
}

# mvn clean install
exec { 'build_newts':
  cwd     => $newts_local_repo,
  command => "mvn clean install",
  path    => "/usr/local/bin/:/usr/bin:/bin/",
  user    => vagrant,
  creates => $newts_target_jar,
  require => [Package['maven'], Vcsrepo[$newts_local_repo]],
  subscribe => Vcsrepo[$newts_local_repo]
}

# mkdir
file { [ $newts_home ]:
  ensure => 'directory'
}

# ln
file { $newts_jar:
  ensure  => 'link',
  target  => $newts_target_jar,
  require => [File[$newts_home], Exec['build_newts']]
}

# echo <config> > config.yaml
file { $newts_config:
  ensure => present,
  content => template('newts/config.yaml.erb'),
  require => File[$newts_jar]
}

# java -jar target/newts-rest-<version>-SNAPSHOT.jar init config.yaml
exec { 'init_newts':
  cwd     => $newts_home,
  command => "java -jar ${newts_jar} init ${newts_config} && touch ${newts_home}/initialized",
  path    => "/usr/local/bin/:/usr/bin:/bin/",
  creates => "${newts_home}/initialized",
  require => [File[$newts_config], Service['cassandra']]
}

# java -jar target/newts-rest-<version>-SNAPSHOT.jar server config.yaml
include java_service_wrapper
java_service_wrapper::service{ 'newts':
  wrapper_mainclass  => 'WrapperJarApp',
  wrapper_additional => ['-Xmx256m'],
  wrapper_library    => ['/usr/local/lib'],
  wrapper_classpath  => ['/usr/local/lib/wrapper.jar', $newts_jar],
  wrapper_parameter  => [$newts_jar, 'server', $newts_config ],
  require            => Exec['init_newts'],
  subscribe          => Exec['build_newts'],
}

# cp
file { "${newts_home}/sample-measurements.txt":
  ensure  => file,
  source  => '/vagrant/files/measurements.txt',
  owner   => root,
  group   => root,
  mode    => 644
}

# Add the sample measurements
exec { 'newts_sample_data':
  cwd     => $newts_home,
  command => "curl -X POST -H 'Content-Type: application/json' -d @sample-measurements.txt http://0.0.0.0:8080/samples && touch ${newts_home}/sampled",
  path    => "/usr/local/bin/:/usr/bin:/bin/",
  creates => "${newts_home}/sampled",
  require => [Service['newts'], Package['curl']],
}

# Hack used to trigger a delayed `/etc/init.d/newts start` in hope that Cassandra is up and running
file { '/etc/rc.local':
  ensure  => file,
  source  => '/vagrant/files/rc.local',
  owner   => root,
  group   => root,
  mode    => 755
}

